#/usr/bin/env bash
# vi: set syn=sh :

# Sets up an OS X workstation how I like it.

# TODO: Separate things that need sudo access from those that don't (like Homebrew)

function installDevTools() {
    if [[ -e $(xcode-select --print-path) ]]
    then
        echo "!! XCode command line tools already present."
        return
    fi
    echo "!! Installing XCode command line tools"
    xcode-select --install;
    echo "!! Sleeping for 10 minutes to allow XCode to install."
    sleep 600;
}

function cloneDotfiles() {
    if [[ -e $HOME/.dotfiles ]]
    then
        return
    fi

    # Clone with the login-free HTTP URL first, then update our local origin URL
    git clone https://github.com/nrb/dotfiles.git $HOME/.dotfiles
    cd $HOME/.dotfiles
    git remote set-url origin git@github.com:nrb/dotfiles.git
}

function installNvimPlugins() {
    # vim-plug is downloaded in the nvim init.vim file
    # Run plugin installation, then exit
    nvim -i NONE +PlugInstall +qa
}

function installHomebrew() {
    if [ -e /opt/homebrew/bin/brew ]
    then
        return
    fi
    echo "!! Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/opt/homebrew/bin/brew shellenv)"
    brew doctor
}

function installPrograms() {
    usefile="personal"
    if [ "$USER" == "nbrubake" ]; then
       usefile="work"
    fi
    brew bundle --file Brewfile.$usefile
    # The swift version of dockutil isn't in homebrew, so download it and install it to our home folder so we don't need sudo.
    echo "! Installing dockutil"
    curl -Lk https://github.com/kcrawford/dockutil/releases/download/3.0.2/dockutil-3.0.2.pkg --silent --output /tmp/dockutil.pkg
    installer -pkg /tmp/dockutil.pkg -target CurrentUserHomeDirectory
    rm /tmp/dockutil.pkg
}

function cleanDockIcons() {
    echo "! Cleaning up default dock icons as of Monterey"
    for app in "Launchpad" "Safari" "Messages" "Maps" "Photos" "FaceTime" "Calendar" "Contacts" "Reminders" "Notes" "TV" "Music" "Podcasts" "News" "App Store" "System Preferences" "Downloads" "Keynote" "Numbers" "Pages"; do
        dockutil --remove "${app}"
    done
}

# A nice defaults command reference:
# http://rixstep.com/2/20060901,00.shtml
function configureDock() {
    echo "! Dock to 2D"
    defaults write com.apple.dock no-glass -boolean YES
    echo "! Dock to bottom corner"
    defaults write com.apple.dock pinning -string end
    echo "! Disabling dock transparency"
    defaults write com.apple.universalaccess reduceTransparency -bool true
    echo "! Use the scale effect to minimize"
    defaults write com.apple.dock mineffect scale
    echo "! Put dock on the right of the screen."
    defaults write com.apple.dock orientation -string right;
    if [[ $(defaults read com.apple.dock magnification 2> /dev/null) == 0 ]]
    then
        echo "! Turn off dock zoom"
        defaults delete com.apple.dock magnification;
    fi
    echo "! Show indicator lights in the dock"
    defaults write com.apple.dock show-process-indicators -bool true
    echo "! Disable dock launch animation"
    defaults write com.apple.dock launchanim -bool false
    echo "! Automatically show/hide the dock"
    defaults write com.apple.dock autohide -bool true
    echo "! Restarting Dock"

    killall Dock;
}

function configureFinder() {
    echo "! Set home dir as default path for new windows."
    defaults write com.apple.finder NewWindowTarget -string "PfLo"
    defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}"
    echo "! Hiding media from the desktop"
    defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
    defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
    defaults write com.apple.finder ShowMountedServersOnDesktop -bool false
    defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
    echo "! Showing full posix path in Finder window title."
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
    echo "! Disabling .DS_Store files on network volumes."
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
    echo "! Empty Trash securely by default"
    defaults write com.apple.finder EmptyTrashSecurely -bool true
    echo "! Showing the ~/Library"
    chflags nohidden ~/Library
    echo "! Show all file extensions"
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true
    
    echo "! Enabling snap-to-grid for icon views"
    /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
    /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
    /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist

    killall Finder;
    
    # Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app
    defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false
}

# taken from https://gist.github.com/thomasfinch/14bd3181799734c872d2ad3b207cc01c
function configureNightShift() {
    echo "! Enabling Night Shift"
    plistLoc="/private/var/root/Library/Preferences/com.apple.CoreBrightness.plist"

    currentUserUID=$(dscl . -read /Users/$(whoami)/ GeneratedUID) # Get the GeneratedUID for the current user
    currentUserUID=$(echo $currentUserUID | cut -d' ' -f2) # Remove the "GeneratedUID: " part
    currentUserUID="CBUser-"$currentUserUID # Append the prefix

    # Enable settings
    algoOverride=4
    enabled=1

    # Change the settings directly in the core brightness plist (defaults doesn't deal with nested data structures well)
    sudo /usr/libexec/PlistBuddy -c "Set :$currentUserUID:CBBlueReductionStatus:BlueLightReductionAlgoOverride $algoOverride" $plistLoc
    sudo /usr/libexec/PlistBuddy -c "Set :$currentUserUID:CBBlueReductionStatus:BlueReductionEnabled $enabled" $plistLoc
    sudo /usr/libexec/PlistBuddy -c "Set :$currentUserUID:CBBlueReductionStatus:BlueLightReductionAlgoOverrideTimestamp `date`" $plistLoc
}

function installAsdfStuff() {
    # Eventually this might be an array, but not right now
    asdf plugin add golang
    asdf install golang latest
}

function main() {
    if ! [[ "$OSTYPE" =~ ^darwin ]];
    then
        echo "ERROR: This script must be run under OS X."
        exit 1
    fi
    installDevTools
    cloneDotfiles
    installHomebrew
    installPrograms
    installNvimPlugins
    installAsdfStuff

    configureDock
    cleanDockIcons
    configureFinder
    configureNightShift
    
    echo "! Configuring Activity Monitor"
    # Show the main window when launching Activity Monitor
    defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

    # Show all processes in Activity Monitor
    defaults write com.apple.ActivityMonitor ShowCategory -int 0
    
    # Disable smart quotes as they’re annoying when typing code
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

    # Disable smart dashes as they’re annoying when typing code
    defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

    # Prettier fonts, per alacritty docs.
    defaults write -g AppleFontSmoothing -int 0

    echo "! Setting timezone (sudo)"
    sudo systemsetup -settimezone "America/New York" > /dev/null
}

main "$@"
